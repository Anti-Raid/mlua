name: CI
on: [push, pull_request]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest, windows-latest]
        rust: [stable]
        lua: [lua54, lua53, lua52, lua51, luajit]
        include:
        - os: ubuntu-18.04
          target: x86_64-unknown-linux-gnu
        - os: macos-latest
          target: x86_64-apple-darwin
        - os: windows-latest
          target: x86_64-pc-windows-msvc
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true
    - name: Build ${{ matrix.lua }} vendored
      run: |
        cargo build --release --features "${{ matrix.lua }} vendored"
        cargo build --release --features "${{ matrix.lua }} vendored async send"
      shell: bash
    - name: Build ${{ matrix.lua }} pkg-config
      if: ${{ matrix.os == 'ubuntu-18.04' && matrix.lua != 'lua54' }}
      run: |
        sudo apt-get update -y
        sudo apt-get install -y --no-install-recommends liblua5.3-dev liblua5.2-dev liblua5.1-0-dev libluajit-5.1-dev
        cargo build --release --features "${{ matrix.lua }}"

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest, windows-latest]
        rust: [stable]
        lua: [lua54, lua53, lua52, lua51, luajit]
        include:
        - os: ubuntu-18.04
          target: x86_64-unknown-linux-gnu
        - os: macos-latest
          target: x86_64-apple-darwin
        - os: windows-latest
          target: x86_64-pc-windows-msvc
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true
    - name: Run ${{ matrix.lua }} tests
      if: ${{ matrix.os != 'macos-latest' || matrix.lua != 'luajit' }}
      run: |
        cargo test --release --features "${{ matrix.lua }} vendored"
        cargo test --release --features "${{ matrix.lua }} vendored async send"
      shell: bash
    - name: Run compile tests (macos lua53)
      if: ${{ matrix.os == 'macos-latest' && matrix.lua == 'lua53' }}
      run: |
        TRYBUILD=overwrite cargo test --release --features "${{ matrix.lua }} vendored" -- --ignored
        TRYBUILD=overwrite cargo test --release --features "${{ matrix.lua }} vendored async send" -- --ignored
      shell: bash

  test_luajit_macos:
    name: Test LuaJIT on macOS
    runs-on: macos-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        target: x86_64-apple-darwin
        override: true
    - name: Run LuaJIT 2.0.5 tests
      run: |
        brew install luajit pkg-config
        cargo test --tests --release --features "luajit async send" -- --test-threads=1
      shell: bash
    - name: Run LuaJIT vendored tests
      run: |
        cargo test --release --features "luajit vendored async send"
      shell: bash

  test_modules:
    name: Test modules on Linux and macOS
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]
        rust: [stable]
        lua: [lua54, lua53, lua52, lua51, luajit]
        include:
        - os: ubuntu-18.04
          target: x86_64-unknown-linux-gnu
        - os: macos-latest
          target: x86_64-apple-darwin
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true
    - name: Run ${{ matrix.lua }} module tests
      run: |
        (cd examples/module && cargo build --release --features "${{ matrix.lua }} vendored")
        (cd tests/module && cargo test --release --features "${{ matrix.lua }} vendored")
      shell: bash

  test_modules_windows:
    name: Test modules on Windows
    runs-on: windows-latest
    needs: build
    strategy:
      matrix:
        lua: [lua53, lua51, luajit]
    defaults:
      run:
        shell: bash.exe --login -eo pipefail "{0}"
    env:
      MSYSTEM: MINGW64
      CHERE_INVOKING: 1
    steps:
    - uses: actions/checkout@v2
    - name: Set up shell
      run: echo ::add-path::C:\msys64\usr\bin\
      shell: pwsh
    - name: Install Rust & Lua
      run: |
        pacman -S --noconfirm mingw-w64-x86_64-rust mingw-w64-x86_64-lua mingw-w64-x86_64-lua51 mingw-w64-x86_64-luajit
    - name: Run ${{ matrix.lua }} module tests
      run: |
        (cd examples/module && cargo build --release --features "${{ matrix.lua }}")
        (cd tests/module && cargo test --release --features "${{ matrix.lua }}")

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt
        override: true
    - run: cargo fmt -- --check

  clippy:
    name: Clippy check
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        lua: [lua54, lua53, lua52, lua51, luajit]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            components: clippy
            override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --features "${{ matrix.lua }},async,send,vendored
