error[E0277]: the type `std::cell::UnsafeCell<()>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary
   --> $DIR/lua_norefunwindsafe.rs:7:5
    |
7   |     catch_unwind(|| lua.create_table().unwrap());
    |     ^^^^^^^^^^^^ `std::cell::UnsafeCell<()>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary
    |
   ::: $RUST/src/libstd/panic.rs
    |
    | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {
    |                                        ---------- required by this bound in `std::panic::catch_unwind`
    |
    = help: within `mlua::Lua`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<()>`
    = note: required because it appears within the type `std::marker::PhantomData<std::cell::UnsafeCell<()>>`
    = note: required because it appears within the type `mlua::Lua`
    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&mlua::Lua`
    = note: required because it appears within the type `[closure@$DIR/tests/compile/lua_norefunwindsafe.rs:7:18: 7:48 lua:&mlua::Lua]`
